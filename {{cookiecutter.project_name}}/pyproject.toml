[project]
name = "{{ cookiecutter.project_name }}"
license = "{{ cookiecutter.license }}"
requires-python = "^{{ cookiecutter.python_major_version }}.{{ cookiecutter.python_minor_version }}"


[tool.black]
line-length = 100

[tool.cruft]
skip = [
    "{{ cookiecutter.project_name }}/__init__.py",
    "README.md",
    "CHANGELOG.md",
    "vulture_allowlist.py"
]

[tool.isort]
known_first_party = "{{ cookiecutter.project_name }}"
line_length = 100
skip_glob="**/__init__.py"
### for compatibility with black
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
check_untyped_defs = true

[tool.pytest.ini_options]
minversion = "6.0"
log_cli = 1
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s [%(levelname)s] %(module)s.%(funcName)s.%(lineno)d: %(message)s"
log_cli_date_format = "%H:%M:%S"
addopts = "-v --capture=sys tests"

[tool.vulture]
exclude=[]
paths = ["{{ cookiecutter.__project_slug }}", "vulture_allowlist.py"]

[tool.poetry]
name = "{{ cookiecutter.project_name }}"
version = "v0.1.0"
description = "{{ cookiecutter.project_short_description }}"
authors = ["{{ cookiecutter.full_name }} <{{ cookiecutter.email }}>"]
{%- if cookiecutter.license is not none %}
license = "{{ cookiecutter.license }}"
{%- endif %}
classifiers=[
{%- if cookiecutter.license == "GPLv3" %}
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
{%- elif cookiecutter.license == "Apache" %}
    "License :: OSI Approved :: Apache Software License",
{%- elif cookiecutter.license == "MIT" %}
    "License :: OSI Approved :: MIT License",
{%- endif %}
    "Programming Language :: Python :: {{ cookiecutter.python_major_version }}.{{ cookiecutter.python_minor_version }}"
]
repository = "{{ cookiecutter.url }}"
readme = "README.md"
include = ["CHANGELOG.md", "README.md"]

[tool.poetry.dependencies]
python = "^{{ cookiecutter.python_major_version }}.{{ cookiecutter.python_minor_version }}"

[tool.poetry.dev-dependencies]
black = "{{ cookiecutter._black_version }}"
dlint = "{{ cookiecutter._dlint_version }}"
flake8 = "{{ cookiecutter._flake8_version }}"
isort = "{{ cookiecutter._isort_version }}"
mypy = "{{ cookiecutter._mypy_version }}"
pudb = "^2022.1.2"
pynvim = "^0.4.3"
pytest = "^7.1.0"
pytest-cov = "^3.0.0"
pytest-xdist = "^3.3.1"
vulture = "{{ cookiecutter._vulture_version }}"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
